// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tickets.proto

package tickets

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PrintJob struct {
	Filename             string    `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
	Contest              *IdName   `protobuf:"bytes,2,opt,name=contest,proto3" json:"contest,omitempty"`
	Team                 *IdName   `protobuf:"bytes,3,opt,name=team,proto3" json:"team,omitempty"`
	Computer             *Computer `protobuf:"bytes,4,opt,name=computer,proto3" json:"computer,omitempty"`
	Area                 *IdName   `protobuf:"bytes,5,opt,name=area,proto3" json:"area,omitempty"`
	Data                 []byte    `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
	TimestampSeconds     uint64    `protobuf:"varint,7,opt,name=timestamp_seconds,json=timestampSeconds,proto3" json:"timestamp_seconds,omitempty"`
	Printer              string    `protobuf:"bytes,8,opt,name=printer,proto3" json:"printer,omitempty"`
	JobId                string    `protobuf:"bytes,9,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	Charset              string    `protobuf:"bytes,10,opt,name=charset,proto3" json:"charset,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *PrintJob) Reset()         { *m = PrintJob{} }
func (m *PrintJob) String() string { return proto.CompactTextString(m) }
func (*PrintJob) ProtoMessage()    {}
func (*PrintJob) Descriptor() ([]byte, []int) {
	return fileDescriptor_tickets_fe3a3c93457c6020, []int{0}
}
func (m *PrintJob) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrintJob) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrintJob.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PrintJob) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrintJob.Merge(dst, src)
}
func (m *PrintJob) XXX_Size() int {
	return m.Size()
}
func (m *PrintJob) XXX_DiscardUnknown() {
	xxx_messageInfo_PrintJob.DiscardUnknown(m)
}

var xxx_messageInfo_PrintJob proto.InternalMessageInfo

func (m *PrintJob) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

func (m *PrintJob) GetContest() *IdName {
	if m != nil {
		return m.Contest
	}
	return nil
}

func (m *PrintJob) GetTeam() *IdName {
	if m != nil {
		return m.Team
	}
	return nil
}

func (m *PrintJob) GetComputer() *Computer {
	if m != nil {
		return m.Computer
	}
	return nil
}

func (m *PrintJob) GetArea() *IdName {
	if m != nil {
		return m.Area
	}
	return nil
}

func (m *PrintJob) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *PrintJob) GetTimestampSeconds() uint64 {
	if m != nil {
		return m.TimestampSeconds
	}
	return 0
}

func (m *PrintJob) GetPrinter() string {
	if m != nil {
		return m.Printer
	}
	return ""
}

func (m *PrintJob) GetJobId() string {
	if m != nil {
		return m.JobId
	}
	return ""
}

func (m *PrintJob) GetCharset() string {
	if m != nil {
		return m.Charset
	}
	return ""
}

type PrintJobReport struct {
	JobExpandedId        string   `protobuf:"bytes,1,opt,name=job_expanded_id,json=jobExpandedId,proto3" json:"job_expanded_id,omitempty"`
	NumPages             int64    `protobuf:"varint,2,opt,name=num_pages,json=numPages,proto3" json:"num_pages,omitempty"`
	ErrorMessage         string   `protobuf:"bytes,3,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	TimestampSeconds     int64    `protobuf:"varint,4,opt,name=timestamp_seconds,json=timestampSeconds,proto3" json:"timestamp_seconds,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PrintJobReport) Reset()         { *m = PrintJobReport{} }
func (m *PrintJobReport) String() string { return proto.CompactTextString(m) }
func (*PrintJobReport) ProtoMessage()    {}
func (*PrintJobReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_tickets_fe3a3c93457c6020, []int{1}
}
func (m *PrintJobReport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrintJobReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrintJobReport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PrintJobReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrintJobReport.Merge(dst, src)
}
func (m *PrintJobReport) XXX_Size() int {
	return m.Size()
}
func (m *PrintJobReport) XXX_DiscardUnknown() {
	xxx_messageInfo_PrintJobReport.DiscardUnknown(m)
}

var xxx_messageInfo_PrintJobReport proto.InternalMessageInfo

func (m *PrintJobReport) GetJobExpandedId() string {
	if m != nil {
		return m.JobExpandedId
	}
	return ""
}

func (m *PrintJobReport) GetNumPages() int64 {
	if m != nil {
		return m.NumPages
	}
	return 0
}

func (m *PrintJobReport) GetErrorMessage() string {
	if m != nil {
		return m.ErrorMessage
	}
	return ""
}

func (m *PrintJobReport) GetTimestampSeconds() int64 {
	if m != nil {
		return m.TimestampSeconds
	}
	return 0
}

type TexJob struct {
	Printer              string   `protobuf:"bytes,1,opt,name=printer,proto3" json:"printer,omitempty"`
	Data                 []byte   `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	JobId                string   `protobuf:"bytes,3,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TexJob) Reset()         { *m = TexJob{} }
func (m *TexJob) String() string { return proto.CompactTextString(m) }
func (*TexJob) ProtoMessage()    {}
func (*TexJob) Descriptor() ([]byte, []int) {
	return fileDescriptor_tickets_fe3a3c93457c6020, []int{2}
}
func (m *TexJob) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TexJob) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TexJob.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TexJob) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TexJob.Merge(dst, src)
}
func (m *TexJob) XXX_Size() int {
	return m.Size()
}
func (m *TexJob) XXX_DiscardUnknown() {
	xxx_messageInfo_TexJob.DiscardUnknown(m)
}

var xxx_messageInfo_TexJob proto.InternalMessageInfo

func (m *TexJob) GetPrinter() string {
	if m != nil {
		return m.Printer
	}
	return ""
}

func (m *TexJob) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *TexJob) GetJobId() string {
	if m != nil {
		return m.JobId
	}
	return ""
}

type BinaryJob struct {
	Printer              string   `protobuf:"bytes,1,opt,name=printer,proto3" json:"printer,omitempty"`
	Data                 []byte   `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	JobId                string   `protobuf:"bytes,3,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BinaryJob) Reset()         { *m = BinaryJob{} }
func (m *BinaryJob) String() string { return proto.CompactTextString(m) }
func (*BinaryJob) ProtoMessage()    {}
func (*BinaryJob) Descriptor() ([]byte, []int) {
	return fileDescriptor_tickets_fe3a3c93457c6020, []int{3}
}
func (m *BinaryJob) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BinaryJob) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BinaryJob.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *BinaryJob) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BinaryJob.Merge(dst, src)
}
func (m *BinaryJob) XXX_Size() int {
	return m.Size()
}
func (m *BinaryJob) XXX_DiscardUnknown() {
	xxx_messageInfo_BinaryJob.DiscardUnknown(m)
}

var xxx_messageInfo_BinaryJob proto.InternalMessageInfo

func (m *BinaryJob) GetPrinter() string {
	if m != nil {
		return m.Printer
	}
	return ""
}

func (m *BinaryJob) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *BinaryJob) GetJobId() string {
	if m != nil {
		return m.JobId
	}
	return ""
}

type IdName struct {
	Id                   uint32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IdName) Reset()         { *m = IdName{} }
func (m *IdName) String() string { return proto.CompactTextString(m) }
func (*IdName) ProtoMessage()    {}
func (*IdName) Descriptor() ([]byte, []int) {
	return fileDescriptor_tickets_fe3a3c93457c6020, []int{4}
}
func (m *IdName) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IdName) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IdName.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *IdName) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IdName.Merge(dst, src)
}
func (m *IdName) XXX_Size() int {
	return m.Size()
}
func (m *IdName) XXX_DiscardUnknown() {
	xxx_messageInfo_IdName.DiscardUnknown(m)
}

var xxx_messageInfo_IdName proto.InternalMessageInfo

func (m *IdName) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *IdName) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Computer struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Computer) Reset()         { *m = Computer{} }
func (m *Computer) String() string { return proto.CompactTextString(m) }
func (*Computer) ProtoMessage()    {}
func (*Computer) Descriptor() ([]byte, []int) {
	return fileDescriptor_tickets_fe3a3c93457c6020, []int{5}
}
func (m *Computer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Computer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Computer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Computer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Computer.Merge(dst, src)
}
func (m *Computer) XXX_Size() int {
	return m.Size()
}
func (m *Computer) XXX_DiscardUnknown() {
	xxx_messageInfo_Computer.DiscardUnknown(m)
}

var xxx_messageInfo_Computer proto.InternalMessageInfo

func (m *Computer) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Computer) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Ticket struct {
	Contest              *IdName          `protobuf:"bytes,1,opt,name=contest,proto3" json:"contest,omitempty"`
	Team                 *IdName          `protobuf:"bytes,2,opt,name=team,proto3" json:"team,omitempty"`
	Area                 *IdName          `protobuf:"bytes,3,opt,name=area,proto3" json:"area,omitempty"`
	Computer             *Computer        `protobuf:"bytes,4,opt,name=computer,proto3" json:"computer,omitempty"`
	Problem              *Ticket_Problem  `protobuf:"bytes,5,opt,name=problem,proto3" json:"problem,omitempty"`
	SubmitId             uint32           `protobuf:"varint,6,opt,name=submit_id,json=submitId,proto3" json:"submit_id,omitempty"`
	JudgeTime            uint64           `protobuf:"varint,7,opt,name=judge_time,json=judgeTime,proto3" json:"judge_time,omitempty"`
	Submit               []*Ticket_Submit `protobuf:"bytes,8,rep,name=submit,proto3" json:"submit,omitempty"`
	Printer              string           `protobuf:"bytes,9,opt,name=printer,proto3" json:"printer,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Ticket) Reset()         { *m = Ticket{} }
func (m *Ticket) String() string { return proto.CompactTextString(m) }
func (*Ticket) ProtoMessage()    {}
func (*Ticket) Descriptor() ([]byte, []int) {
	return fileDescriptor_tickets_fe3a3c93457c6020, []int{6}
}
func (m *Ticket) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Ticket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Ticket.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Ticket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ticket.Merge(dst, src)
}
func (m *Ticket) XXX_Size() int {
	return m.Size()
}
func (m *Ticket) XXX_DiscardUnknown() {
	xxx_messageInfo_Ticket.DiscardUnknown(m)
}

var xxx_messageInfo_Ticket proto.InternalMessageInfo

func (m *Ticket) GetContest() *IdName {
	if m != nil {
		return m.Contest
	}
	return nil
}

func (m *Ticket) GetTeam() *IdName {
	if m != nil {
		return m.Team
	}
	return nil
}

func (m *Ticket) GetArea() *IdName {
	if m != nil {
		return m.Area
	}
	return nil
}

func (m *Ticket) GetComputer() *Computer {
	if m != nil {
		return m.Computer
	}
	return nil
}

func (m *Ticket) GetProblem() *Ticket_Problem {
	if m != nil {
		return m.Problem
	}
	return nil
}

func (m *Ticket) GetSubmitId() uint32 {
	if m != nil {
		return m.SubmitId
	}
	return 0
}

func (m *Ticket) GetJudgeTime() uint64 {
	if m != nil {
		return m.JudgeTime
	}
	return 0
}

func (m *Ticket) GetSubmit() []*Ticket_Submit {
	if m != nil {
		return m.Submit
	}
	return nil
}

func (m *Ticket) GetPrinter() string {
	if m != nil {
		return m.Printer
	}
	return ""
}

type Ticket_Submit struct {
	SubmitNumber         uint32                `protobuf:"varint,1,opt,name=submit_number,json=submitNumber,proto3" json:"submit_number,omitempty"`
	Arrived              uint64                `protobuf:"varint,2,opt,name=arrived,proto3" json:"arrived,omitempty"`
	Compiled             bool                  `protobuf:"varint,3,opt,name=compiled,proto3" json:"compiled,omitempty"`
	School               *Ticket_Submit_School `protobuf:"bytes,4,opt,name=school,proto3" json:"school,omitempty"`
	Acm                  *Ticket_Submit_ACM    `protobuf:"bytes,5,opt,name=acm,proto3" json:"acm,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *Ticket_Submit) Reset()         { *m = Ticket_Submit{} }
func (m *Ticket_Submit) String() string { return proto.CompactTextString(m) }
func (*Ticket_Submit) ProtoMessage()    {}
func (*Ticket_Submit) Descriptor() ([]byte, []int) {
	return fileDescriptor_tickets_fe3a3c93457c6020, []int{6, 0}
}
func (m *Ticket_Submit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Ticket_Submit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Ticket_Submit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Ticket_Submit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ticket_Submit.Merge(dst, src)
}
func (m *Ticket_Submit) XXX_Size() int {
	return m.Size()
}
func (m *Ticket_Submit) XXX_DiscardUnknown() {
	xxx_messageInfo_Ticket_Submit.DiscardUnknown(m)
}

var xxx_messageInfo_Ticket_Submit proto.InternalMessageInfo

func (m *Ticket_Submit) GetSubmitNumber() uint32 {
	if m != nil {
		return m.SubmitNumber
	}
	return 0
}

func (m *Ticket_Submit) GetArrived() uint64 {
	if m != nil {
		return m.Arrived
	}
	return 0
}

func (m *Ticket_Submit) GetCompiled() bool {
	if m != nil {
		return m.Compiled
	}
	return false
}

func (m *Ticket_Submit) GetSchool() *Ticket_Submit_School {
	if m != nil {
		return m.School
	}
	return nil
}

func (m *Ticket_Submit) GetAcm() *Ticket_Submit_ACM {
	if m != nil {
		return m.Acm
	}
	return nil
}

type Ticket_Submit_School struct {
	TestsTaken           uint32   `protobuf:"varint,1,opt,name=tests_taken,json=testsTaken,proto3" json:"tests_taken,omitempty"`
	TestsPassed          uint32   `protobuf:"varint,2,opt,name=tests_passed,json=testsPassed,proto3" json:"tests_passed,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Ticket_Submit_School) Reset()         { *m = Ticket_Submit_School{} }
func (m *Ticket_Submit_School) String() string { return proto.CompactTextString(m) }
func (*Ticket_Submit_School) ProtoMessage()    {}
func (*Ticket_Submit_School) Descriptor() ([]byte, []int) {
	return fileDescriptor_tickets_fe3a3c93457c6020, []int{6, 0, 0}
}
func (m *Ticket_Submit_School) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Ticket_Submit_School) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Ticket_Submit_School.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Ticket_Submit_School) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ticket_Submit_School.Merge(dst, src)
}
func (m *Ticket_Submit_School) XXX_Size() int {
	return m.Size()
}
func (m *Ticket_Submit_School) XXX_DiscardUnknown() {
	xxx_messageInfo_Ticket_Submit_School.DiscardUnknown(m)
}

var xxx_messageInfo_Ticket_Submit_School proto.InternalMessageInfo

func (m *Ticket_Submit_School) GetTestsTaken() uint32 {
	if m != nil {
		return m.TestsTaken
	}
	return 0
}

func (m *Ticket_Submit_School) GetTestsPassed() uint32 {
	if m != nil {
		return m.TestsPassed
	}
	return 0
}

type Ticket_Submit_ACM struct {
	Result               string   `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	TestId               uint32   `protobuf:"varint,2,opt,name=test_id,json=testId,proto3" json:"test_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Ticket_Submit_ACM) Reset()         { *m = Ticket_Submit_ACM{} }
func (m *Ticket_Submit_ACM) String() string { return proto.CompactTextString(m) }
func (*Ticket_Submit_ACM) ProtoMessage()    {}
func (*Ticket_Submit_ACM) Descriptor() ([]byte, []int) {
	return fileDescriptor_tickets_fe3a3c93457c6020, []int{6, 0, 1}
}
func (m *Ticket_Submit_ACM) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Ticket_Submit_ACM) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Ticket_Submit_ACM.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Ticket_Submit_ACM) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ticket_Submit_ACM.Merge(dst, src)
}
func (m *Ticket_Submit_ACM) XXX_Size() int {
	return m.Size()
}
func (m *Ticket_Submit_ACM) XXX_DiscardUnknown() {
	xxx_messageInfo_Ticket_Submit_ACM.DiscardUnknown(m)
}

var xxx_messageInfo_Ticket_Submit_ACM proto.InternalMessageInfo

func (m *Ticket_Submit_ACM) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

func (m *Ticket_Submit_ACM) GetTestId() uint32 {
	if m != nil {
		return m.TestId
	}
	return 0
}

type Ticket_Problem struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Ticket_Problem) Reset()         { *m = Ticket_Problem{} }
func (m *Ticket_Problem) String() string { return proto.CompactTextString(m) }
func (*Ticket_Problem) ProtoMessage()    {}
func (*Ticket_Problem) Descriptor() ([]byte, []int) {
	return fileDescriptor_tickets_fe3a3c93457c6020, []int{6, 1}
}
func (m *Ticket_Problem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Ticket_Problem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Ticket_Problem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Ticket_Problem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ticket_Problem.Merge(dst, src)
}
func (m *Ticket_Problem) XXX_Size() int {
	return m.Size()
}
func (m *Ticket_Problem) XXX_DiscardUnknown() {
	xxx_messageInfo_Ticket_Problem.DiscardUnknown(m)
}

var xxx_messageInfo_Ticket_Problem proto.InternalMessageInfo

func (m *Ticket_Problem) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Ticket_Problem) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterType((*PrintJob)(nil), "tickets.PrintJob")
	proto.RegisterType((*PrintJobReport)(nil), "tickets.PrintJobReport")
	proto.RegisterType((*TexJob)(nil), "tickets.TexJob")
	proto.RegisterType((*BinaryJob)(nil), "tickets.BinaryJob")
	proto.RegisterType((*IdName)(nil), "tickets.IdName")
	proto.RegisterType((*Computer)(nil), "tickets.Computer")
	proto.RegisterType((*Ticket)(nil), "tickets.Ticket")
	proto.RegisterType((*Ticket_Submit)(nil), "tickets.Ticket.Submit")
	proto.RegisterType((*Ticket_Submit_School)(nil), "tickets.Ticket.Submit.School")
	proto.RegisterType((*Ticket_Submit_ACM)(nil), "tickets.Ticket.Submit.ACM")
	proto.RegisterType((*Ticket_Problem)(nil), "tickets.Ticket.Problem")
}
func (m *PrintJob) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrintJob) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Filename) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTickets(dAtA, i, uint64(len(m.Filename)))
		i += copy(dAtA[i:], m.Filename)
	}
	if m.Contest != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTickets(dAtA, i, uint64(m.Contest.Size()))
		n1, err := m.Contest.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Team != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTickets(dAtA, i, uint64(m.Team.Size()))
		n2, err := m.Team.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.Computer != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTickets(dAtA, i, uint64(m.Computer.Size()))
		n3, err := m.Computer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.Area != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTickets(dAtA, i, uint64(m.Area.Size()))
		n4, err := m.Area.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTickets(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	if m.TimestampSeconds != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTickets(dAtA, i, uint64(m.TimestampSeconds))
	}
	if len(m.Printer) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTickets(dAtA, i, uint64(len(m.Printer)))
		i += copy(dAtA[i:], m.Printer)
	}
	if len(m.JobId) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTickets(dAtA, i, uint64(len(m.JobId)))
		i += copy(dAtA[i:], m.JobId)
	}
	if len(m.Charset) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintTickets(dAtA, i, uint64(len(m.Charset)))
		i += copy(dAtA[i:], m.Charset)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PrintJobReport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrintJobReport) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.JobExpandedId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTickets(dAtA, i, uint64(len(m.JobExpandedId)))
		i += copy(dAtA[i:], m.JobExpandedId)
	}
	if m.NumPages != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTickets(dAtA, i, uint64(m.NumPages))
	}
	if len(m.ErrorMessage) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTickets(dAtA, i, uint64(len(m.ErrorMessage)))
		i += copy(dAtA[i:], m.ErrorMessage)
	}
	if m.TimestampSeconds != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTickets(dAtA, i, uint64(m.TimestampSeconds))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TexJob) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TexJob) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Printer) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTickets(dAtA, i, uint64(len(m.Printer)))
		i += copy(dAtA[i:], m.Printer)
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTickets(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	if len(m.JobId) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTickets(dAtA, i, uint64(len(m.JobId)))
		i += copy(dAtA[i:], m.JobId)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BinaryJob) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BinaryJob) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Printer) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTickets(dAtA, i, uint64(len(m.Printer)))
		i += copy(dAtA[i:], m.Printer)
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTickets(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	if len(m.JobId) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTickets(dAtA, i, uint64(len(m.JobId)))
		i += copy(dAtA[i:], m.JobId)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *IdName) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IdName) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTickets(dAtA, i, uint64(m.Id))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTickets(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Computer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Computer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTickets(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTickets(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Ticket) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Ticket) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Contest != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTickets(dAtA, i, uint64(m.Contest.Size()))
		n5, err := m.Contest.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.Team != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTickets(dAtA, i, uint64(m.Team.Size()))
		n6, err := m.Team.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.Area != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTickets(dAtA, i, uint64(m.Area.Size()))
		n7, err := m.Area.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.Computer != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTickets(dAtA, i, uint64(m.Computer.Size()))
		n8, err := m.Computer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.Problem != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTickets(dAtA, i, uint64(m.Problem.Size()))
		n9, err := m.Problem.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.SubmitId != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTickets(dAtA, i, uint64(m.SubmitId))
	}
	if m.JudgeTime != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTickets(dAtA, i, uint64(m.JudgeTime))
	}
	if len(m.Submit) > 0 {
		for _, msg := range m.Submit {
			dAtA[i] = 0x42
			i++
			i = encodeVarintTickets(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Printer) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintTickets(dAtA, i, uint64(len(m.Printer)))
		i += copy(dAtA[i:], m.Printer)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Ticket_Submit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Ticket_Submit) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SubmitNumber != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTickets(dAtA, i, uint64(m.SubmitNumber))
	}
	if m.Arrived != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTickets(dAtA, i, uint64(m.Arrived))
	}
	if m.Compiled {
		dAtA[i] = 0x18
		i++
		if m.Compiled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.School != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTickets(dAtA, i, uint64(m.School.Size()))
		n10, err := m.School.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.Acm != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTickets(dAtA, i, uint64(m.Acm.Size()))
		n11, err := m.Acm.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Ticket_Submit_School) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Ticket_Submit_School) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TestsTaken != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTickets(dAtA, i, uint64(m.TestsTaken))
	}
	if m.TestsPassed != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTickets(dAtA, i, uint64(m.TestsPassed))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Ticket_Submit_ACM) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Ticket_Submit_ACM) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Result) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTickets(dAtA, i, uint64(len(m.Result)))
		i += copy(dAtA[i:], m.Result)
	}
	if m.TestId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTickets(dAtA, i, uint64(m.TestId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Ticket_Problem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Ticket_Problem) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTickets(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTickets(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintTickets(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *PrintJob) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Filename)
	if l > 0 {
		n += 1 + l + sovTickets(uint64(l))
	}
	if m.Contest != nil {
		l = m.Contest.Size()
		n += 1 + l + sovTickets(uint64(l))
	}
	if m.Team != nil {
		l = m.Team.Size()
		n += 1 + l + sovTickets(uint64(l))
	}
	if m.Computer != nil {
		l = m.Computer.Size()
		n += 1 + l + sovTickets(uint64(l))
	}
	if m.Area != nil {
		l = m.Area.Size()
		n += 1 + l + sovTickets(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovTickets(uint64(l))
	}
	if m.TimestampSeconds != 0 {
		n += 1 + sovTickets(uint64(m.TimestampSeconds))
	}
	l = len(m.Printer)
	if l > 0 {
		n += 1 + l + sovTickets(uint64(l))
	}
	l = len(m.JobId)
	if l > 0 {
		n += 1 + l + sovTickets(uint64(l))
	}
	l = len(m.Charset)
	if l > 0 {
		n += 1 + l + sovTickets(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PrintJobReport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.JobExpandedId)
	if l > 0 {
		n += 1 + l + sovTickets(uint64(l))
	}
	if m.NumPages != 0 {
		n += 1 + sovTickets(uint64(m.NumPages))
	}
	l = len(m.ErrorMessage)
	if l > 0 {
		n += 1 + l + sovTickets(uint64(l))
	}
	if m.TimestampSeconds != 0 {
		n += 1 + sovTickets(uint64(m.TimestampSeconds))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TexJob) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Printer)
	if l > 0 {
		n += 1 + l + sovTickets(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovTickets(uint64(l))
	}
	l = len(m.JobId)
	if l > 0 {
		n += 1 + l + sovTickets(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BinaryJob) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Printer)
	if l > 0 {
		n += 1 + l + sovTickets(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovTickets(uint64(l))
	}
	l = len(m.JobId)
	if l > 0 {
		n += 1 + l + sovTickets(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IdName) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTickets(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTickets(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Computer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTickets(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTickets(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Ticket) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Contest != nil {
		l = m.Contest.Size()
		n += 1 + l + sovTickets(uint64(l))
	}
	if m.Team != nil {
		l = m.Team.Size()
		n += 1 + l + sovTickets(uint64(l))
	}
	if m.Area != nil {
		l = m.Area.Size()
		n += 1 + l + sovTickets(uint64(l))
	}
	if m.Computer != nil {
		l = m.Computer.Size()
		n += 1 + l + sovTickets(uint64(l))
	}
	if m.Problem != nil {
		l = m.Problem.Size()
		n += 1 + l + sovTickets(uint64(l))
	}
	if m.SubmitId != 0 {
		n += 1 + sovTickets(uint64(m.SubmitId))
	}
	if m.JudgeTime != 0 {
		n += 1 + sovTickets(uint64(m.JudgeTime))
	}
	if len(m.Submit) > 0 {
		for _, e := range m.Submit {
			l = e.Size()
			n += 1 + l + sovTickets(uint64(l))
		}
	}
	l = len(m.Printer)
	if l > 0 {
		n += 1 + l + sovTickets(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Ticket_Submit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SubmitNumber != 0 {
		n += 1 + sovTickets(uint64(m.SubmitNumber))
	}
	if m.Arrived != 0 {
		n += 1 + sovTickets(uint64(m.Arrived))
	}
	if m.Compiled {
		n += 2
	}
	if m.School != nil {
		l = m.School.Size()
		n += 1 + l + sovTickets(uint64(l))
	}
	if m.Acm != nil {
		l = m.Acm.Size()
		n += 1 + l + sovTickets(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Ticket_Submit_School) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TestsTaken != 0 {
		n += 1 + sovTickets(uint64(m.TestsTaken))
	}
	if m.TestsPassed != 0 {
		n += 1 + sovTickets(uint64(m.TestsPassed))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Ticket_Submit_ACM) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovTickets(uint64(l))
	}
	if m.TestId != 0 {
		n += 1 + sovTickets(uint64(m.TestId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Ticket_Problem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTickets(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTickets(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovTickets(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTickets(x uint64) (n int) {
	return sovTickets(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PrintJob) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTickets
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrintJob: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrintJob: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filename", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTickets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTickets
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Filename = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTickets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTickets
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Contest == nil {
				m.Contest = &IdName{}
			}
			if err := m.Contest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Team", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTickets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTickets
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Team == nil {
				m.Team = &IdName{}
			}
			if err := m.Team.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Computer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTickets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTickets
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Computer == nil {
				m.Computer = &Computer{}
			}
			if err := m.Computer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Area", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTickets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTickets
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Area == nil {
				m.Area = &IdName{}
			}
			if err := m.Area.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTickets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTickets
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimestampSeconds", wireType)
			}
			m.TimestampSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTickets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimestampSeconds |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Printer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTickets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTickets
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Printer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTickets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTickets
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Charset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTickets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTickets
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Charset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTickets(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTickets
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrintJobReport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTickets
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrintJobReport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrintJobReport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobExpandedId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTickets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTickets
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobExpandedId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumPages", wireType)
			}
			m.NumPages = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTickets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumPages |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrorMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTickets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTickets
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrorMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimestampSeconds", wireType)
			}
			m.TimestampSeconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTickets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimestampSeconds |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTickets(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTickets
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TexJob) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTickets
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TexJob: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TexJob: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Printer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTickets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTickets
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Printer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTickets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTickets
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTickets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTickets
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTickets(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTickets
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BinaryJob) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTickets
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BinaryJob: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BinaryJob: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Printer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTickets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTickets
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Printer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTickets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTickets
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTickets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTickets
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.JobId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTickets(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTickets
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IdName) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTickets
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IdName: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IdName: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTickets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTickets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTickets
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTickets(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTickets
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Computer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTickets
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Computer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Computer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTickets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTickets
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTickets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTickets
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTickets(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTickets
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Ticket) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTickets
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Ticket: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Ticket: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTickets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTickets
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Contest == nil {
				m.Contest = &IdName{}
			}
			if err := m.Contest.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Team", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTickets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTickets
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Team == nil {
				m.Team = &IdName{}
			}
			if err := m.Team.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Area", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTickets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTickets
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Area == nil {
				m.Area = &IdName{}
			}
			if err := m.Area.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Computer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTickets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTickets
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Computer == nil {
				m.Computer = &Computer{}
			}
			if err := m.Computer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Problem", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTickets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTickets
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Problem == nil {
				m.Problem = &Ticket_Problem{}
			}
			if err := m.Problem.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubmitId", wireType)
			}
			m.SubmitId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTickets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubmitId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JudgeTime", wireType)
			}
			m.JudgeTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTickets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JudgeTime |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Submit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTickets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTickets
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Submit = append(m.Submit, &Ticket_Submit{})
			if err := m.Submit[len(m.Submit)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Printer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTickets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTickets
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Printer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTickets(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTickets
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Ticket_Submit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTickets
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Submit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Submit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubmitNumber", wireType)
			}
			m.SubmitNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTickets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SubmitNumber |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arrived", wireType)
			}
			m.Arrived = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTickets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Arrived |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Compiled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTickets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Compiled = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field School", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTickets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTickets
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.School == nil {
				m.School = &Ticket_Submit_School{}
			}
			if err := m.School.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Acm", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTickets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTickets
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Acm == nil {
				m.Acm = &Ticket_Submit_ACM{}
			}
			if err := m.Acm.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTickets(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTickets
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Ticket_Submit_School) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTickets
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: School: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: School: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestsTaken", wireType)
			}
			m.TestsTaken = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTickets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TestsTaken |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestsPassed", wireType)
			}
			m.TestsPassed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTickets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TestsPassed |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTickets(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTickets
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Ticket_Submit_ACM) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTickets
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ACM: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ACM: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTickets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTickets
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TestId", wireType)
			}
			m.TestId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTickets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TestId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTickets(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTickets
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Ticket_Problem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTickets
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Problem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Problem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTickets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTickets
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTickets
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTickets
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTickets(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTickets
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTickets(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTickets
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTickets
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTickets
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTickets
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTickets
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTickets(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTickets = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTickets   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("tickets.proto", fileDescriptor_tickets_fe3a3c93457c6020) }

var fileDescriptor_tickets_fe3a3c93457c6020 = []byte{
	// 693 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0xfd, 0xec, 0xa4, 0x8e, 0x7d, 0x9b, 0xf4, 0x67, 0xa4, 0xaf, 0xb5, 0x82, 0x1a, 0x42, 0x2a,
	0xa1, 0x20, 0xda, 0x48, 0x14, 0xc1, 0xbe, 0xad, 0x58, 0x04, 0x91, 0x2a, 0x9a, 0x66, 0x1f, 0x8d,
	0xed, 0xa1, 0x75, 0x1a, 0x7b, 0xac, 0x99, 0x31, 0x2a, 0x6f, 0xc2, 0x1b, 0xf0, 0x2a, 0xac, 0x10,
	0x2b, 0xd6, 0xa8, 0x88, 0xf7, 0x40, 0xf3, 0xe3, 0x90, 0x42, 0x5b, 0x15, 0x89, 0xdd, 0xdc, 0x73,
	0xcf, 0xbd, 0x99, 0x7b, 0xee, 0x99, 0x18, 0x5a, 0x32, 0x8d, 0x2f, 0xa8, 0x14, 0x83, 0x82, 0x33,
	0xc9, 0x50, 0xc3, 0x86, 0xbd, 0xaf, 0x2e, 0xf8, 0x63, 0x9e, 0xe6, 0xf2, 0x35, 0x8b, 0x50, 0x1b,
	0xfc, 0xb7, 0xe9, 0x9c, 0xe6, 0x24, 0xa3, 0xa1, 0xd3, 0x75, 0xfa, 0x01, 0x5e, 0xc4, 0xe8, 0x09,
	0x34, 0x62, 0x96, 0x4b, 0x2a, 0x64, 0xe8, 0x76, 0x9d, 0xfe, 0xea, 0xc1, 0xfa, 0xa0, 0x6a, 0x39,
	0x4c, 0x4e, 0x48, 0x46, 0x71, 0x95, 0x47, 0xbb, 0x50, 0x97, 0x94, 0x64, 0x61, 0xed, 0x66, 0x9e,
	0x4e, 0xa2, 0x7d, 0xf0, 0x63, 0x96, 0x15, 0xa5, 0xa4, 0x3c, 0xac, 0x6b, 0xe2, 0xe6, 0x82, 0x78,
	0x6c, 0x13, 0x78, 0x41, 0x51, 0x3d, 0x09, 0xa7, 0x24, 0x5c, 0xb9, 0xa5, 0xa7, 0x4a, 0x22, 0x04,
	0xf5, 0x84, 0x48, 0x12, 0x7a, 0x5d, 0xa7, 0xdf, 0xc4, 0xfa, 0x8c, 0x9e, 0xc2, 0xa6, 0x4c, 0x33,
	0x2a, 0x24, 0xc9, 0x8a, 0xa9, 0xa0, 0x31, 0xcb, 0x13, 0x11, 0x36, 0xba, 0x4e, 0xbf, 0x8e, 0x37,
	0x16, 0x89, 0x53, 0x83, 0xa3, 0x10, 0x1a, 0x85, 0x12, 0x83, 0xf2, 0xd0, 0xd7, 0xf3, 0x57, 0x21,
	0xfa, 0x1f, 0xbc, 0x19, 0x8b, 0xa6, 0x69, 0x12, 0x06, 0x3a, 0xb1, 0x32, 0x63, 0xd1, 0x30, 0x51,
	0x05, 0xf1, 0x39, 0xe1, 0x82, 0xca, 0x10, 0x4c, 0x81, 0x0d, 0x7b, 0x1f, 0x1d, 0x58, 0xab, 0x84,
	0xc5, 0xb4, 0x60, 0x5c, 0xa2, 0xc7, 0xb0, 0xae, 0x7a, 0xd0, 0xcb, 0x82, 0xe4, 0x09, 0x4d, 0x54,
	0x33, 0xa3, 0x72, 0x6b, 0xc6, 0xa2, 0x57, 0x16, 0x1d, 0x26, 0xe8, 0x01, 0x04, 0x79, 0x99, 0x4d,
	0x0b, 0x72, 0x46, 0x85, 0x16, 0xbb, 0x86, 0xfd, 0xbc, 0xcc, 0xc6, 0x2a, 0x46, 0xbb, 0xd0, 0xa2,
	0x9c, 0x33, 0x3e, 0xcd, 0xa8, 0x10, 0xe4, 0x8c, 0x6a, 0x95, 0x03, 0xdc, 0xd4, 0xe0, 0xc8, 0x60,
	0x37, 0x0f, 0x5d, 0xd7, 0x9d, 0xfe, 0x18, 0xba, 0x37, 0x02, 0x6f, 0x42, 0x2f, 0xd5, 0xfe, 0x97,
	0xc6, 0x77, 0xae, 0x8f, 0x5f, 0x29, 0xeb, 0x2e, 0x29, 0xfb, 0x4b, 0x92, 0xda, 0x92, 0x24, 0xbd,
	0x31, 0x04, 0x47, 0x69, 0x4e, 0xf8, 0xfb, 0x7f, 0xd6, 0x71, 0x0f, 0x3c, 0xb3, 0x66, 0xb4, 0x06,
	0xae, 0x15, 0xad, 0x85, 0xdd, 0x34, 0x51, 0x4d, 0xb4, 0x59, 0x5d, 0x4d, 0xd7, 0xe7, 0xde, 0x00,
	0xfc, 0xca, 0x3f, 0x4b, 0xfc, 0xe0, 0x56, 0xfe, 0x8f, 0x15, 0xf0, 0x26, 0xda, 0x4d, 0xcb, 0x1e,
	0x77, 0xee, 0xe9, 0x71, 0xf7, 0x2e, 0x8f, 0x57, 0xa6, 0xad, 0xdd, 0x65, 0xda, 0xbf, 0x7c, 0x08,
	0xcf, 0x94, 0xa2, 0x2c, 0x9a, 0xd3, 0xcc, 0xbe, 0x85, 0xed, 0x05, 0xdb, 0x4c, 0x31, 0x18, 0x9b,
	0x34, 0xae, 0x78, 0xca, 0x4f, 0xa2, 0x8c, 0xb2, 0x54, 0x2a, 0x65, 0x3d, 0x2d, 0x9e, 0x6f, 0x80,
	0x61, 0x82, 0x76, 0x00, 0x66, 0x65, 0x72, 0x46, 0xa7, 0xca, 0x17, 0xf6, 0x61, 0x04, 0x1a, 0x99,
	0xa4, 0x19, 0x45, 0x03, 0xf0, 0x0c, 0x35, 0xf4, 0xbb, 0xb5, 0xfe, 0xea, 0xc1, 0xd6, 0xef, 0xbf,
	0x76, 0xaa, 0xb3, 0xd8, 0xb2, 0x96, 0x17, 0x1e, 0x5c, 0x5b, 0x78, 0xfb, 0xb3, 0x0b, 0x9e, 0x21,
	0x2b, 0x0f, 0xdb, 0x0b, 0xe5, 0x65, 0x16, 0x59, 0x6f, 0xb4, 0x70, 0xd3, 0x80, 0x27, 0x1a, 0x53,
	0x9d, 0x08, 0xe7, 0xe9, 0x3b, 0x9a, 0x68, 0x91, 0xeb, 0xb8, 0x0a, 0xd5, 0xdf, 0x94, 0x92, 0x23,
	0x9d, 0x53, 0x63, 0x14, 0x1f, 0x2f, 0x62, 0xf4, 0x02, 0x3c, 0x11, 0x9f, 0x33, 0x36, 0xb7, 0x5a,
	0xee, 0xdc, 0x7c, 0xdf, 0xc1, 0xa9, 0x26, 0x61, 0x4b, 0x46, 0x7b, 0x50, 0x23, 0x71, 0xa5, 0x68,
	0xfb, 0x96, 0x9a, 0xc3, 0xe3, 0x11, 0x56, 0xb4, 0xf6, 0x1b, 0xf0, 0x4c, 0x3d, 0x7a, 0x08, 0xab,
	0xca, 0x0e, 0x62, 0x2a, 0xc9, 0x05, 0xcd, 0xed, 0x1c, 0xa0, 0xa1, 0x89, 0x42, 0xd0, 0x23, 0x68,
	0x1a, 0x42, 0x41, 0x84, 0xb0, 0xa3, 0xb4, 0xb0, 0x29, 0x1a, 0x6b, 0xa8, 0xfd, 0x12, 0x6a, 0x87,
	0xc7, 0x23, 0xb4, 0x05, 0x1e, 0xa7, 0xa2, 0x9c, 0x4b, 0xeb, 0x57, 0x1b, 0xa1, 0x6d, 0x68, 0x28,
	0xb6, 0xda, 0x9d, 0x29, 0xf6, 0x54, 0x38, 0x4c, 0xda, 0xfb, 0xd0, 0xb0, 0xab, 0xbe, 0x8f, 0xcf,
	0x8f, 0x36, 0x3e, 0x5d, 0x75, 0x9c, 0x2f, 0x57, 0x1d, 0xe7, 0xdb, 0x55, 0xc7, 0xf9, 0xf0, 0xbd,
	0xf3, 0x5f, 0xe4, 0xe9, 0x6f, 0xc1, 0xf3, 0x9f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xbf, 0xda, 0x73,
	0x53, 0x1c, 0x06, 0x00, 0x00,
}
