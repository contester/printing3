// Code generated by protoc-gen-go.
// source: tickets.proto
// DO NOT EDIT!

package tickets

import proto "code.google.com/p/goprotobuf/proto"
import json "encoding/json"
import math "math"

// Reference proto, json, and math imports to suppress error if they are not otherwise used.
var _ = proto.Marshal
var _ = &json.SyntaxError{}
var _ = math.Inf

type Blob_CompressionInfo_CompressionType int32

const (
	Blob_CompressionInfo_METHOD_NONE Blob_CompressionInfo_CompressionType = 0
	Blob_CompressionInfo_METHOD_ZLIB Blob_CompressionInfo_CompressionType = 1
)

var Blob_CompressionInfo_CompressionType_name = map[int32]string{
	0: "METHOD_NONE",
	1: "METHOD_ZLIB",
}
var Blob_CompressionInfo_CompressionType_value = map[string]int32{
	"METHOD_NONE": 0,
	"METHOD_ZLIB": 1,
}

func (x Blob_CompressionInfo_CompressionType) Enum() *Blob_CompressionInfo_CompressionType {
	p := new(Blob_CompressionInfo_CompressionType)
	*p = x
	return p
}
func (x Blob_CompressionInfo_CompressionType) String() string {
	return proto.EnumName(Blob_CompressionInfo_CompressionType_name, int32(x))
}
func (x Blob_CompressionInfo_CompressionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.String())
}
func (x *Blob_CompressionInfo_CompressionType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Blob_CompressionInfo_CompressionType_value, data, "Blob_CompressionInfo_CompressionType")
	if err != nil {
		return err
	}
	*x = Blob_CompressionInfo_CompressionType(value)
	return nil
}

type Blob struct {
	Data             []byte                `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Compression      *Blob_CompressionInfo `protobuf:"bytes,2,opt,name=compression" json:"compression,omitempty"`
	Sha1             []byte                `protobuf:"bytes,3,opt,name=sha1" json:"sha1,omitempty"`
	XXX_unrecognized []byte                `json:"-"`
}

func (m *Blob) Reset()         { *m = Blob{} }
func (m *Blob) String() string { return proto.CompactTextString(m) }
func (*Blob) ProtoMessage()    {}

func (m *Blob) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Blob) GetCompression() *Blob_CompressionInfo {
	if m != nil {
		return m.Compression
	}
	return nil
}

func (m *Blob) GetSha1() []byte {
	if m != nil {
		return m.Sha1
	}
	return nil
}

type Blob_CompressionInfo struct {
	Method           *Blob_CompressionInfo_CompressionType `protobuf:"varint,1,opt,name=method,enum=tickets.Blob_CompressionInfo_CompressionType" json:"method,omitempty"`
	OriginalSize     *uint32                               `protobuf:"varint,2,opt,name=original_size" json:"original_size,omitempty"`
	XXX_unrecognized []byte                                `json:"-"`
}

func (m *Blob_CompressionInfo) Reset()         { *m = Blob_CompressionInfo{} }
func (m *Blob_CompressionInfo) String() string { return proto.CompactTextString(m) }
func (*Blob_CompressionInfo) ProtoMessage()    {}

func (m *Blob_CompressionInfo) GetMethod() Blob_CompressionInfo_CompressionType {
	if m != nil && m.Method != nil {
		return *m.Method
	}
	return 0
}

func (m *Blob_CompressionInfo) GetOriginalSize() uint32 {
	if m != nil && m.OriginalSize != nil {
		return *m.OriginalSize
	}
	return 0
}

type PrintJob struct {
	Filename         *string   `protobuf:"bytes,1,opt,name=filename" json:"filename,omitempty"`
	Contest          *IdName   `protobuf:"bytes,2,opt,name=contest" json:"contest,omitempty"`
	Team             *IdName   `protobuf:"bytes,3,opt,name=team" json:"team,omitempty"`
	Computer         *Computer `protobuf:"bytes,4,opt,name=computer" json:"computer,omitempty"`
	Area             *IdName   `protobuf:"bytes,5,opt,name=area" json:"area,omitempty"`
	Data             *Blob     `protobuf:"bytes,6,opt,name=data" json:"data,omitempty"`
	Timestamp        *uint64   `protobuf:"varint,7,opt,name=timestamp" json:"timestamp,omitempty"`
	Printer          *string   `protobuf:"bytes,8,opt,name=printer" json:"printer,omitempty"`
	JobId            *uint32   `protobuf:"varint,9,opt,name=job_id" json:"job_id,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *PrintJob) Reset()         { *m = PrintJob{} }
func (m *PrintJob) String() string { return proto.CompactTextString(m) }
func (*PrintJob) ProtoMessage()    {}

func (m *PrintJob) GetFilename() string {
	if m != nil && m.Filename != nil {
		return *m.Filename
	}
	return ""
}

func (m *PrintJob) GetContest() *IdName {
	if m != nil {
		return m.Contest
	}
	return nil
}

func (m *PrintJob) GetTeam() *IdName {
	if m != nil {
		return m.Team
	}
	return nil
}

func (m *PrintJob) GetComputer() *Computer {
	if m != nil {
		return m.Computer
	}
	return nil
}

func (m *PrintJob) GetArea() *IdName {
	if m != nil {
		return m.Area
	}
	return nil
}

func (m *PrintJob) GetData() *Blob {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *PrintJob) GetTimestamp() uint64 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *PrintJob) GetPrinter() string {
	if m != nil && m.Printer != nil {
		return *m.Printer
	}
	return ""
}

func (m *PrintJob) GetJobId() uint32 {
	if m != nil && m.JobId != nil {
		return *m.JobId
	}
	return 0
}

type BinaryJob struct {
	Printer          *string `protobuf:"bytes,1,opt,name=printer" json:"printer,omitempty"`
	Data             *Blob   `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
	JobId            *string `protobuf:"bytes,3,opt,name=job_id" json:"job_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *BinaryJob) Reset()         { *m = BinaryJob{} }
func (m *BinaryJob) String() string { return proto.CompactTextString(m) }
func (*BinaryJob) ProtoMessage()    {}

func (m *BinaryJob) GetPrinter() string {
	if m != nil && m.Printer != nil {
		return *m.Printer
	}
	return ""
}

func (m *BinaryJob) GetData() *Blob {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *BinaryJob) GetJobId() string {
	if m != nil && m.JobId != nil {
		return *m.JobId
	}
	return ""
}

type IdName struct {
	Id               *uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name             *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *IdName) Reset()         { *m = IdName{} }
func (m *IdName) String() string { return proto.CompactTextString(m) }
func (*IdName) ProtoMessage()    {}

func (m *IdName) GetId() uint32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *IdName) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

type Computer struct {
	Id               *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name             *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Computer) Reset()         { *m = Computer{} }
func (m *Computer) String() string { return proto.CompactTextString(m) }
func (*Computer) ProtoMessage()    {}

func (m *Computer) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *Computer) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

type Ticket struct {
	Contest          *IdName          `protobuf:"bytes,1,opt,name=contest" json:"contest,omitempty"`
	Team             *IdName          `protobuf:"bytes,2,opt,name=team" json:"team,omitempty"`
	Area             *IdName          `protobuf:"bytes,3,opt,name=area" json:"area,omitempty"`
	Computer         *Computer        `protobuf:"bytes,4,opt,name=computer" json:"computer,omitempty"`
	Problem          *Ticket_Problem  `protobuf:"bytes,5,opt,name=problem" json:"problem,omitempty"`
	SubmitId         *uint32          `protobuf:"varint,6,opt,name=submit_id" json:"submit_id,omitempty"`
	JudgeTime        *uint64          `protobuf:"varint,7,opt,name=judge_time" json:"judge_time,omitempty"`
	Submit           []*Ticket_Submit `protobuf:"bytes,8,rep,name=submit" json:"submit,omitempty"`
	Printer          *string          `protobuf:"bytes,9,opt,name=printer" json:"printer,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *Ticket) Reset()         { *m = Ticket{} }
func (m *Ticket) String() string { return proto.CompactTextString(m) }
func (*Ticket) ProtoMessage()    {}

func (m *Ticket) GetContest() *IdName {
	if m != nil {
		return m.Contest
	}
	return nil
}

func (m *Ticket) GetTeam() *IdName {
	if m != nil {
		return m.Team
	}
	return nil
}

func (m *Ticket) GetArea() *IdName {
	if m != nil {
		return m.Area
	}
	return nil
}

func (m *Ticket) GetComputer() *Computer {
	if m != nil {
		return m.Computer
	}
	return nil
}

func (m *Ticket) GetProblem() *Ticket_Problem {
	if m != nil {
		return m.Problem
	}
	return nil
}

func (m *Ticket) GetSubmitId() uint32 {
	if m != nil && m.SubmitId != nil {
		return *m.SubmitId
	}
	return 0
}

func (m *Ticket) GetJudgeTime() uint64 {
	if m != nil && m.JudgeTime != nil {
		return *m.JudgeTime
	}
	return 0
}

func (m *Ticket) GetSubmit() []*Ticket_Submit {
	if m != nil {
		return m.Submit
	}
	return nil
}

func (m *Ticket) GetPrinter() string {
	if m != nil && m.Printer != nil {
		return *m.Printer
	}
	return ""
}

type Ticket_Submit struct {
	SubmitNumber     *uint32               `protobuf:"varint,1,opt,name=submit_number" json:"submit_number,omitempty"`
	Arrived          *uint64               `protobuf:"varint,2,opt,name=arrived" json:"arrived,omitempty"`
	Compiled         *bool                 `protobuf:"varint,3,opt,name=compiled" json:"compiled,omitempty"`
	School           *Ticket_Submit_School `protobuf:"bytes,4,opt,name=school" json:"school,omitempty"`
	Acm              *Ticket_Submit_ACM    `protobuf:"bytes,5,opt,name=acm" json:"acm,omitempty"`
	XXX_unrecognized []byte                `json:"-"`
}

func (m *Ticket_Submit) Reset()         { *m = Ticket_Submit{} }
func (m *Ticket_Submit) String() string { return proto.CompactTextString(m) }
func (*Ticket_Submit) ProtoMessage()    {}

func (m *Ticket_Submit) GetSubmitNumber() uint32 {
	if m != nil && m.SubmitNumber != nil {
		return *m.SubmitNumber
	}
	return 0
}

func (m *Ticket_Submit) GetArrived() uint64 {
	if m != nil && m.Arrived != nil {
		return *m.Arrived
	}
	return 0
}

func (m *Ticket_Submit) GetCompiled() bool {
	if m != nil && m.Compiled != nil {
		return *m.Compiled
	}
	return false
}

func (m *Ticket_Submit) GetSchool() *Ticket_Submit_School {
	if m != nil {
		return m.School
	}
	return nil
}

func (m *Ticket_Submit) GetAcm() *Ticket_Submit_ACM {
	if m != nil {
		return m.Acm
	}
	return nil
}

type Ticket_Submit_School struct {
	TestsTaken       *uint32 `protobuf:"varint,1,opt,name=tests_taken" json:"tests_taken,omitempty"`
	TestsPassed      *uint32 `protobuf:"varint,2,opt,name=tests_passed" json:"tests_passed,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Ticket_Submit_School) Reset()         { *m = Ticket_Submit_School{} }
func (m *Ticket_Submit_School) String() string { return proto.CompactTextString(m) }
func (*Ticket_Submit_School) ProtoMessage()    {}

func (m *Ticket_Submit_School) GetTestsTaken() uint32 {
	if m != nil && m.TestsTaken != nil {
		return *m.TestsTaken
	}
	return 0
}

func (m *Ticket_Submit_School) GetTestsPassed() uint32 {
	if m != nil && m.TestsPassed != nil {
		return *m.TestsPassed
	}
	return 0
}

type Ticket_Submit_ACM struct {
	Result           *string `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
	TestId           *uint32 `protobuf:"varint,2,opt,name=test_id" json:"test_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Ticket_Submit_ACM) Reset()         { *m = Ticket_Submit_ACM{} }
func (m *Ticket_Submit_ACM) String() string { return proto.CompactTextString(m) }
func (*Ticket_Submit_ACM) ProtoMessage()    {}

func (m *Ticket_Submit_ACM) GetResult() string {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return ""
}

func (m *Ticket_Submit_ACM) GetTestId() uint32 {
	if m != nil && m.TestId != nil {
		return *m.TestId
	}
	return 0
}

type Ticket_Problem struct {
	Id               *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name             *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Ticket_Problem) Reset()         { *m = Ticket_Problem{} }
func (m *Ticket_Problem) String() string { return proto.CompactTextString(m) }
func (*Ticket_Problem) ProtoMessage()    {}

func (m *Ticket_Problem) GetId() string {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return ""
}

func (m *Ticket_Problem) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func init() {
	proto.RegisterEnum("tickets.Blob_CompressionInfo_CompressionType", Blob_CompressionInfo_CompressionType_name, Blob_CompressionInfo_CompressionType_value)
}
